from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from sqlalchemy.exc import SQLAlchemyError


class ORMManager:
    def __init__(self, db_url, model_class=None):
        self.engine = create_engine(db_url)
        self.Session = sessionmaker(bind=self.engine)
        self.model_class = model_class

    def create_table(self):
        """–°–æ–∑–¥–∞—ë—Ç —Ç–∞–±–ª–∏—Ü—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –º–æ–¥–µ–ª—å—é."""
        if hasattr(self.model_class, "metadata"):
            self.model_class.metadata.create_all(self.engine)

    def add_instance(self, **kwargs):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –º–æ–¥–µ–ª–∏ –≤ –ë–î."""
        session = self.Session()
        try:
            instance = self.model_class(**kwargs)
            session.add(instance)
            session.commit()
            print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {instance}")
            return instance
        except SQLAlchemyError as e:
            session.rollback()
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏: {e}")
            return None
        finally:
            session.close()

    def find_instance(self, **kwargs):
        """–ò—â–µ—Ç –æ–±—ä–µ–∫—Ç—ã –º–æ–¥–µ–ª–∏ –ø–æ —É–∫–∞–∑–∞–Ω–Ω—ã–º –∞—Ç—Ä–∏–±—É—Ç–∞–º."""
        session = self.Session()
        try:
            results = session.query(self.model_class).filter_by(**kwargs).all()
            if results:
                print(f"üîç –ù–∞–π–¥–µ–Ω–æ: {len(results)}")
            else:
                print("‚ö†Ô∏è –ù–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π")
            return results
        except SQLAlchemyError as e:
            session.rollback()
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {e}")
            return []
        finally:
            session.close()
