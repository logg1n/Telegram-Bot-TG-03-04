# routers.py

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command

from telegram.keyboards.reply_keyboard import main_keyboard
from telegram.keyboards.inline_keyboard import url_keyboard, dynamic_keyboard, sub_dynamic_keyboard

def get_router(db):
    router = Router()

    @router.message(Command("start"))
    async def start(message: Message):
        await message.answer(
            f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n"
            "–Ø —É–º–µ—é –¥–æ–±–∞–≤–ª—è—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫.\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/add <–∏–º—è> <–≤–æ–∑—Ä–∞—Å—Ç> <–∫–ª–∞—Å—Å>\n"
            "/get ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∏–ª–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å"
        , reply_markup=main_keyboard)

    @router.message(F.text.in_(["–ü—Ä–∏–≤–µ—Ç", "–ü–æ–∫–∞"]))
    async def handle_hi_bye(message: Message):
        name = message.from_user.first_name
        if message.text == "–ü—Ä–∏–≤–µ—Ç":
            await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {name}!")
        else:
            await message.answer(f"–î–æ —Å–≤–∏–¥–∞–Ω–∏—è, {name}!")

    @router.message(Command("links"))
    async def links(message: Message):
        await message.reply("–°—Å—ã–ª–∫–∏", reply_markup=url_keyboard)

    @router.message(Command("dynamic"))
    async def dynamic(message: Message):
        await message.answer("JR", reply_markup=dynamic_keyboard)

    @router.callback_query(F.data == "show_more")
    async def call_dynamic(callback: CallbackQuery):
        await callback.message.edit_text("–û–ø—Ü–∏–∏", reply_markup=sub_dynamic_keyboard)

    @router.message(Command("add"))
    async def add(message: Message):
        parts = message.text.strip().split(maxsplit=3)
        if len(parts) != 4:
            await message.answer("‚ùå –§–æ—Ä–º–∞—Ç: /add <–∏–º—è> <–≤–æ–∑—Ä–∞—Å—Ç> <–∫–ª–∞—Å—Å>")
            return

        _, name, age, grade = parts
        try:
            student = db.add_instance(name=name, age=int(age), grade=grade)
            await message.answer(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω: {student.name}, {student.age} –ª–µ—Ç, –∫–ª–∞—Å—Å {student.grade}")
        except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {e}")

    @router.message(Command("get"))
    async def get(message: Message):
        args = message.text.strip().split()[1:]
        session = db.Session()

        try:
            query = session.query(db.model_class)
            filters = {}
            if args:
                if len(args) >= 1:
                    filters["name"] = args[0]
                if len(args) >= 2:
                    try:
                        filters["age"] = int(args[1])
                    except ValueError:
                        pass
                if len(args) >= 3:
                    filters["grade"] = args[2]
                query = query.filter_by(**filters)

            results = query.all()
            if not results:
                await message.answer("üì≠ –ù–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π.")
                return

            text = "\n".join([f"{s.id}. {s.name}, {s.age} –ª–µ—Ç, –∫–ª–∞—Å—Å {s.grade}" for s in results])
            await message.answer(f"üìö –ù–∞–π–¥–µ–Ω–æ: {len(results)}\n{text}")
        finally:
            session.close()

    return router
